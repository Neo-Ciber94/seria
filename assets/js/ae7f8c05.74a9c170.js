"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[332],{9823:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=s(9214),r=s(5629);const i={sidebar_position:2},a="Custom Types",o={id:"advanced/custom-types",title:"Custom Types",description:"Similar to the global JSON seria allow to pass a replacer and reviver function but the behaviour in our case is different.",source:"@site/docs/advanced/custom-types.md",sourceDirName:"advanced",slug:"/advanced/custom-types",permalink:"/seria/docs/advanced/custom-types",draft:!1,unlisted:!1,editUrl:"https://github.com/Neo-Ciber94/seria/website/docs/docs/advanced/custom-types.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Advanced",permalink:"/seria/docs/category/advanced"},next:{title:"How it works?",permalink:"/seria/docs/advanced/how-it-works"}},c={},l=[{value:"Example",id:"example",level:2},{value:"Serializing <code>URL</code>",id:"serializing-url",level:3},{value:"Serializing <code>RegExp</code>",id:"serializing-regexp",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"custom-types",children:"Custom Types"}),"\n",(0,t.jsxs)(n.p,{children:["Similar to the global ",(0,t.jsx)(n.code,{children:"JSON"})," seria allow to pass a ",(0,t.jsx)(n.code,{children:"replacer"})," and ",(0,t.jsx)(n.code,{children:"reviver"})," function but the behaviour in our case is different."]}),"\n",(0,t.jsxs)(n.p,{children:["When using a ",(0,t.jsx)(n.code,{children:"stringify"})," function the ",(0,t.jsx)(n.code,{children:"replacer"})," function is called for each value,\nthe replacer take the value to stringify and return a ",(0,t.jsx)(n.code,{children:"string"})," which represents the serialized value or ",(0,t.jsx)(n.code,{children:"undefined"})," to ignore the value."]}),"\n",(0,t.jsxs)(n.p,{children:["For the ",(0,t.jsx)(n.code,{children:"parse"})," operation the ",(0,t.jsx)(n.code,{children:"reviver"})," function is called again for each value and\nshould convert the value converted before to its actual representation, similar to the ",(0,t.jsx)(n.code,{children:"reviver"})," we return ",(0,t.jsx)(n.code,{children:"undefined"})," to ignore the value."]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.h3,{id:"serializing-url",children:["Serializing ",(0,t.jsx)(n.code,{children:"URL"})]}),"\n",(0,t.jsxs)(n.p,{children:["For URL we check if the value is an ",(0,t.jsx)(n.code,{children:"URL"})," and then return a value in the format:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$<tag><data>\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"Tags",type:"tip",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/Neo-Ciber94/seria/blob/main/packages/seria/src/tag.ts",children:"Checkout all the existing tags"})})}),"\n",(0,t.jsxs)(n.p,{children:["This is the format ",(0,t.jsx)(n.code,{children:"seria"})," use to represents any non-serializable value like ",(0,t.jsx)(n.code,{children:"Date"})," and the ",(0,t.jsx)(n.strong,{children:"tag"})," is used to look up the value."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const input = {\n  url: new URL("http://127.0.0.1:3000/seria?hello=world"),\n};\n\nconst json = stringify(input, (val) => {\n  if (val instanceof URL) {\n    return `$1${val.href}`; // $1 is our custom tag for URL\n  }\n\n  return undefined;\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For parsing because the serialized value is a ",(0,t.jsx)(n.code,{children:"string"})," we check both, if is a string and\nif contains the tag we used, then we just need to stripped the tag and create the ",(0,t.jsx)(n.code,{children:"URL"})," from the data."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const value: any = parse(json, (val) => {\n  if (typeof val === "string" && val.startsWith("$1")) {\n    return new URL(val.slice(2)); // remove the tag $1\n  }\n\n  return undefined;\n});\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"serializing-regexp",children:["Serializing ",(0,t.jsx)(n.code,{children:"RegExp"})]}),"\n",(0,t.jsxs)(n.p,{children:["For RegExp we check if the value is an ",(0,t.jsx)(n.code,{children:"RegExp"})," and then return a value in the format:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$<tag><data>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This is the format ",(0,t.jsx)(n.code,{children:"seria"})," use to represents any non-serializable value like ",(0,t.jsx)(n.code,{children:"RegExp"})," and the ",(0,t.jsx)(n.strong,{children:"tag"})," is used to look up the value."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const input = {\n  url: new URL("http://127.0.0.1:3000/seria?hello=world"),\n};\n\nconst json = stringify(input, (val) => {\n  if (val instanceof RegExp) {\n    return `$2${val.toString()}`; // `$2` is our custom tag for RegExp\n  }\n\n  return undefined;\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["And for parsing because the ",(0,t.jsx)(n.code,{children:"string"})," value."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const value: any = parse(json, (val) => {\n  if (typeof val === "string" && val.startsWith("$2")) {\n    const parts = val.slice(2); // remove the tag $2\n    const body = parts.slice(1, parts.lastIndexOf("/"));\n    const flags = parts.slice(parts.lastIndexOf("/") + 1);\n    return new RegExp(body, flags);\n  }\n\n  return undefined;\n});\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5629:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(8318);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);