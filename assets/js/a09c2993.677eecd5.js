"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[899],{2247:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>n,metadata:()=>o,toc:()=>d});var r=i(3274),s=i(9779);const n={sidebar_position:0},a="Introduction",o={id:"introduction",title:"Introduction",description:"What is seria?",source:"@site/docs/introduction.md",sourceDirName:".",slug:"/introduction",permalink:"/seria/docs/introduction",draft:!1,unlisted:!1,editUrl:"https://github.com/Neo-Ciber94/seria/website/docs/docs/introduction.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"docsSidebar",next:{title:"Getting Started",permalink:"/seria/docs/category/getting-started"}},c={},d=[{value:"What is seria?",id:"what-is-seria",level:2},{value:"Why another serialization library?",id:"why-another-serialization-library",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(t.h2,{id:"what-is-seria",children:"What is seria?"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"seria"})," is a spanish word pronunced as ",(0,r.jsx)(t.code,{children:"/se-REE-ah/"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["This is a serialization library that supports types not supported by the global ",(0,r.jsx)(t.code,{children:"JSON"})," object, it allow serialize ",(0,r.jsx)(t.code,{children:"Date"}),", ",(0,r.jsx)(t.code,{children:"BigInt"}),", ",(0,r.jsx)(t.code,{children:"Promise"})," and other types."]}),"\n",(0,r.jsxs)(t.p,{children:["This library is inspired in the new serialization capabilities ",(0,r.jsx)(t.a,{href:"https://react.dev/",children:"React"})," introduces with ",(0,r.jsx)(t.a,{href:"https://react.dev/reference/react/use-server#serializable-parameters-and-return-values",children:"use server"})," and server actions, most of the types listed on the react docs are serializable with ",(0,r.jsx)(t.code,{children:"seria"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"why-another-serialization-library",children:"Why another serialization library?"}),"\n",(0,r.jsxs)(t.p,{children:["Libraries like ",(0,r.jsx)(t.a,{href:"https://github.com/blitz-js/superjson",children:"superjson"})," and ",(0,r.jsx)(t.a,{href:"https://github.com/Rich-Harris/devalue",children:"devalue"})," are already great a serialization and also support custom types but were missing somethings ",(0,r.jsx)(t.code,{children:"Promise"})," and ",(0,r.jsx)(t.code,{children:"FormData"})," which are types that can be used with the new React server capabilities."]})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},9779:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>o});var r=i(9474);const s={},n=r.createContext(s);function a(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);